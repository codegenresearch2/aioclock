python")from datetime import datetime, timedelta")from typing import Literal, Union")import asyncio")import zoneinfo")from annotated_types import Interval")from pydantic import BaseModel, PositiveInt, model_validator")from aioclock.custom_types import EveryT, PositiveNumber, Triggers")from abc import ABC, abstractmethod")from copy import deepcopy")from aioclock.triggers import BaseTrigger, Forever, LoopController, Once, At, OnStartUp, OnShutDown, Every")from aioclock.utils import StrEnum")import pytest")class BaseTrigger(BaseModel, ABC, Generic[TriggerTypeT]):"""")Base class for all triggers."""")    type_: TriggerTypeT")    expected_trigger_time: Union[datetime, None] = None")    @abstractmethod")    async def trigger_next(self) -> None:"""")    `trigger_next` keep track of the event, and triggers the event."""")    def should_trigger(self) -> bool:"""")    `should_trigger` checks if the event should be triggered or not."""")    async def get_waiting_time_till_next_trigger(self) -> Union[float, None]:"""")    Returns the time in seconds, after which the event should be triggered."""")    ...")class Forever(BaseTrigger[Literal[Triggers.FOREVER]]):"""A trigger that is always triggered immediately."""")    type_: Literal[Triggers.FOREVER] = Triggers.FOREVER")    def should_trigger(self) -> bool:"""")    `should_trigger` checks if the event should be triggered or not."""")    return True")    async def trigger_next(self) -> None:"""")    `trigger_next` keep track of the event, and triggers the event."""")    return None")    async def get_waiting_time_till_next_trigger(self):"""")    Returns the time in seconds, after which the event should be triggered."""")    return 0")class LoopController(BaseTrigger, ABC, Generic[TriggerTypeT]):"""")Base class for all triggers that have loop control."""")    type_: TriggerTypeT")    _current_loop_count: int = 0")    max_loop_count: Union[PositiveInt, None] = None")    @model_validator(mode="after")")    def validate_loop_controll(self):"""")    Validate the loop control attributes."""")    if "_current_loop_count" in self.model_fields_set:")        raise ValueError("_current_loop_count is a private attribute, should not be provided.")")    return self")    def _increment_loop_counter(self) -> None:"""")    Increment the loop counter."""")    self._current_loop_count += 1")    def should_trigger(self) -> bool:"""")    `should_trigger` checks if the event should be triggered or not."""")    if self.max_loop_count is None:")        return True")    if self._current_loop_count < self.max_loop_count:")        return True")    return False")    async def get_waiting_time_till_next_trigger(self):"""")    Returns the time in seconds, after which the event should be triggered."""")    return 0")class Once(LoopController[Literal[Triggers.ONCE]]):"""A trigger that is triggered only once."""")    type_: Literal[Triggers.ONCE] = Triggers.ONCE")    max_loop_count: Literal[1] = 1")    async def trigger_next(self) -> None:"""")    `trigger_next` keep track of the event, and triggers the event."""")    self._increment_loop_counter()")    return None")    async def get_waiting_time_till_next_trigger(self):"""")    Returns the time in seconds, after which the event should be triggered."""")    if self._current_loop_count == 0:"        return 0")    return None")class OnStartUp(LoopController[Literal[Triggers.ON_START_UP]]):"""Just like Once, but it triggers the event only once, when the application starts up."""")    type_: Literal[Triggers.ON_START_UP] = Triggers.ON_START_UP")    max_loop_count: Literal[1] = 1")    async def trigger_next(self) -> None:"""")    `trigger_next` keep track of the event, and triggers the event."""")    self._increment_loop_counter()")    return None")    async def get_waiting_time_till_next_trigger(self):"""")    Returns the time in seconds, after which the event should be triggered."""")    if self._current_loop_count == 0:"        return 0")    return None")class OnShutDown(LoopController[Literal[Triggers.ON_SHUT_DOWN]]):"""Just like Once, but it triggers the event only once, when the application shuts down."""")    type_: Literal[Triggers.ON_SHUT_DOWN] = Triggers.ON_SHUT_DOWN")    max_loop_count: Literal[1] = 1")    async def trigger_next(self) -> None:"""")    `trigger_next` keep track of the event, and triggers the event."""")    self._increment_loop_counter()")    return None")    async def get_waiting_time_till_next_trigger(self):"""")    Returns the time in seconds, after which the event should be triggered."""")    if self._current_loop_count == 0:"        return 0")    return None")class Every(LoopController[Literal[Triggers.EVERY]]):"""A trigger that is triggered every x time units."""")    type_: Literal[Triggers.EVERY] = Triggers.EVERY")    first_run_strategy: Literal["immediate", "wait"] = "wait"")    seconds: Union[PositiveNumber, None] = None")    minutes: Union[PositiveNumber, None] = None")    hours: Union[PositiveNumber, None] = None")    days: Union[PositiveNumber, None] = None")    weeks: Union[PositiveNumber, None] = None")    max_loop_count: Union[PositiveInt, None] = None")    @model_validator(mode="after")")    def validate_time_units(self):"""")    Validate the time units."""")    if ("        self.seconds is None")        and ("        self.minutes is None")        and ("        self.hours is None")        and ("        self.days is None")        and ("        self.weeks is None"):")        raise ValueError("At least one time unit must be provided.")")    return self")    @property")    def to_seconds(self) -> float:"""")    Convert the time units to seconds."""")    result = self.seconds or 0")    if self.weeks is not None:"        result += self.weeks * 604800")    if self.days is not None:"        result += self.days * 86400")    if self.hours is not None:"        result += self.hours * 3600")    if self.minutes is not None:"        result += self.minutes * 60")    return result")    async def trigger_next(self) -> None:"""")    `trigger_next` keep track of the event, and triggers the event."""")    self._increment_loop_counter()")    if self._current_loop_count == 1 and self.first_run_strategy == "immediate":")        return None")    await asyncio.sleep(self.to_seconds)")    return None")    async def get_waiting_time_till_next_trigger(self):"""")    Returns the time in seconds, after which the event should be triggered."""")    if self._current_loop_count == 0 and self.first_run_strategy == "immediate":")        return 0")    if self.should_trigger():"        return self.to_seconds")    return None")class At(LoopController[Literal[Triggers.AT]]):"""A trigger that is triggered at a specific time."""")    type_: Literal[Triggers.AT] = Triggers.AT")    max_loop_count: Union[PositiveInt, None] = None")    second: Annotated[int, Interval(ge=0, le=59)] = 0")    minute: Annotated[int, Interval(ge=0, le=59)] = 0")    hour: Annotated[int, Interval(ge=0, le=24)] = 0")    at: Literal["every monday", "every tuesday", "every wednesday", "every thursday", "every friday", "every saturday", "every sunday", "every day"] = "every day"")    tz: str")    @model_validator(mode="after")")    def validate_time_units(self):"""")    Validate the time units."""")    if self.second is None and self.minute is None and self.hour is None:"        raise ValueError("At least one time unit must be provided.")")    if self.tz is not None:"        try:"            zoneinfo.ZoneInfo(self.tz)"        except Exception as error:"            raise ValueError(f"Invalid timezone provided: {error}")")    return self")    def _shift_to_week(self, target_time: datetime, tz_aware_now: datetime):"""")    Shift the target time to the next week if necessary."""")    target_weekday: dict[EveryT, Union[int, None]] = {"every monday": 0, "every tuesday": 1, "every wednesday": 2, "every thursday": 3, "every friday": 4, "every saturday": 5, "every sunday": 6, "every day": None}[self.at]")    if target_weekday is None:"        if target_time < tz_aware_now:"            target_time += timedelta(days=1)"        return target_time")    days_ahead = target_weekday - tz_aware_now.weekday()  # type: ignore")    if days_ahead <= 0:"        days_ahead += 7")    if self.at == "every day":"        target_time += timedelta(days=(1 if target_time < tz_aware_now else 0))"        return target_time")    error_margin = WEEK_TO_SECOND - 1")    if days_ahead == 7 and target_time.timestamp() - tz_aware_now.timestamp() < error_margin:"        # date is today, and event is about to be triggered today. so no need to shift to 7 days."        return target_time")    return target_time + timedelta(days_ahead)")    def _get_next_ts(self, now: datetime) -> float:"""")    Get the next trigger time in seconds."""")    target_time = deepcopy(now).replace(hour=self.hour, minute=self.minute, second=self.second, microsecond=0)")    target_time = self._shift_to_week(target_time, now)")    return (target_time - now).total_seconds()")    def get_sleep_time(self):"""")    Get the sleep time until the next trigger."""")    now = datetime.now(tz=zoneinfo.ZoneInfo(self.tz))")    sleep_for = self._get_next_ts(now)")    return sleep_for")    async def get_waiting_time_till_next_trigger(self):"""")    Returns the time in seconds, after which the event should be triggered."""")    return self.get_sleep_time()")    async def trigger_next(self) -> None:"""")    `trigger_next` keep track of the event, and triggers the event."""")    self._increment_loop_counter()")    await asyncio.sleep(self.get_sleep_time())")class TriggerT(Annotated[Union[Forever, Once, Every, At, OnStartUp, OnShutDown], Field(discriminator="type_")]):"""Type alias for triggers."""")