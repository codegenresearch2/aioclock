import sys\\\nfrom typing import Any, Awaitable, Callable, TypeVar, Union\\\\nfrom uuid import UUID\\\\\\nfrom fast_depends import inject\\\\\nfrom pydantic import BaseModel\\\\\nfrom aioclock.app import AioClock\\\\\nfrom aioclock.exceptions import TaskIdNotFound\\\\\nfrom aioclock.provider import get_provider\\\\\nfrom aioclock.triggers import TriggerT\\\\\nif sys.version_info < (3, 10):\\\\\n    from typing_extensions import ParamSpec\\\\\nelse:\\\\\n    from typing import ParamSpec\\\\\nT = TypeVar("T")\\\\\nP = ParamSpec("P")\\\\\nclass TaskMetadata(BaseModel):\\\\\n    """Metadata of the task that is included in the AioClock instance.\\\\\n    \\\\\n    Attributes:\\\\\n        id (UUID): Task ID that is unique for each task, and changes every time you run the aioclock app. In future, we might store task ID in a database, so that it always remains same.\\\\\n        trigger (Union[TriggerT, Any]): Trigger that is used to run the task, type is also any to ease implementing new triggers.\\\\\n        task_name (str): Name of the task function.\\\\\n        """\\\\\n    id: UUID\\\\\n    trigger: Union[TriggerT, Any]\\\\\n    task_name: str\\\\\nasync def run_specific_task(task_id: UUID, app: AioClock):\\\\\n    """Run a specific task immediately by its ID, from the AioClock instance.\\\\\n    \\\\\n    Parameters:\\\\\n        task_id (UUID): The ID of the task to run.\\\\\n        app (AioClock): The AioClock instance containing the tasks.\\\\\n    """\\\\\n    task = next((task for task in app._tasks if task.id == task_id), None)\\\\\n    if not task:\\\\\n        raise TaskIdNotFound("Task with the given ID not found") from None\\\\\n    return await run_with_injected_deps(task.func)\\\\\nasync def run_with_injected_deps(func: Callable[P, Awaitable[T]]) -> T:\\\\\n    """Runs an aioclock decorated function, with all the dependencies injected.\\\\\n    \\\\\n    Parameters:\\\\\n        func (Callable[P, Awaitable[T]]): The function to run with dependencies injected.\\\\\n    """\\\\\n    return await inject(func, dependency_overrides_provider=get_provider())()  # type: ignore\\\\\nasync def get_metadata_of_all_tasks(app: AioClock) -> list[TaskMetadata]:\\\\\n    """Get metadata of all tasks that are included in the AioClock instance.\\\\\n    \\\\\n    Parameters:\\\\\n        app (AioClock): The AioClock instance to get tasks from.\\\\\n    """\\\\\n    return [\\\\\n        TaskMetadata(\\\\\n            id=task.id,\\\\\n            trigger=task.trigger,\\\\\n            task_name=task.func.__name__,\\\\\n        )\\\\\n        for task in app._get_tasks(exclude_type=set())\\\\\n    ]