import sys\\nfrom typing import Any, Awaitable, Callable, TypeVar, Union\\nfrom uuid import UUID\\n\\nfrom fast_depends import inject\\nfrom pydantic import BaseModel\\n\\nfrom aioclock.app import AioClock\\nfrom aioclock.exceptions import TaskIdNotFound\\nfrom aioclock.provider import get_provider\\nfrom aioclock.triggers import TriggerT\\n\\nif sys.version_info < (3, 10):\\n    from typing_extensions import ParamSpec\\nelse:\\n    from typing import ParamSpec\\n\\nT = TypeVar(\\"T\\")\\nP = ParamSpec(\\"P\\")\\n\\nclass TaskMetadata(BaseModel):\\n    \"\"\"Metadata of the task that is included in the AioClock instance.\\n\\n    Attributes:\\n        id: UUID: Task ID that is unique for each task, and changes every time you run the aioclock app.\\n            In future we might store task ID in a database, so that it always remains same.\\n        trigger: Union[TriggerT, Any]: Trigger that is used to run the task, type is also any to ease implementing new triggers.\\n        task_name: str: Name of the task function.\"\"\"\\n\\n    id: UUID\\n    trigger: Union[TriggerT, Any]\\n    task_name: str\\n\\nasync def run_specific_task(task_id: UUID, app: AioClock):\\n    \"\"\"Run a specific task immediately by its ID, from the AioClock instance.\\n\\n    Example:\\n        \\\"\\\"\\\\n        from aioclock import  AioClock, Once\\n        from aioclock.api import run_specific_task\\n\\n        app = AioClock()\\n\\n        @app.task(trigger=Once())\\n        async def main():\\n            print(\\"Hello World\\")\\n\\n        async def some_other_func():\\n            await run_specific_task(app._tasks[0].id, app)\\n        \\\"\\\"\\n\\n    \"\"\"\\n    task = next((task for task in app._tasks if task.id == task_id), None)\\n    if not task:\\n        raise TaskIdNotFound\\n    return await run_with_injected_deps(task.func)\\n\\nasync def run_with_injected_deps(func: Callable[P, Awaitable[T]]) -> T:\\n    \"\"\"Runs an aioclock decorated function, with all the dependencies injected.\\n\\n    Example:\\n        \\\"\\\"\\\\n        from aioclock import Once, AioClock, Depends\\n        from aioclock.api import run_with_injected_deps\\n\\n        app = AioClock()\\n\\n        def some_dependency():\\n            return 1\\n\\n        @app.task(trigger=Once())\\n        async def main(bar: int = Depends(some_dependency)):\\n            print(\\"Hello World\\")\\n            return bar\\n\\n        async def some_other_func():\\n            foo = await run_with_injected_deps(main)\\n            assert foo == 1\\n        \\\"\\\"\\n\\n    \"\"\"\\n    return await inject(func, dependency_overrides_provider=get_provider())()  # type: ignore\\n\\nasync def get_metadata_of_all_tasks(app: AioClock) -> list[TaskMetadata]:\\n    \"\"\"Get metadata of all tasks that are included in the AioClock instance.\\n\\n    Example:\\n        \\\"\\\"\\\\n        from aioclock import AioClock, Once\\n        from aioclock.api import get_metadata_of_all_tasks\\n\\n        app = AioClock()\\n        @app.task(trigger=Once())\\n        async def main(): ...\\n\\n        async def some_other_func():\\n            metadata = await get_metadata_of_all_tasks(app)\\n        \\\"\\\"\\n    \"\"\"\\n    return [\\n        TaskMetadata(\\\\\n            id=task.id,\\\\\n            trigger=task.trigger,\\\\\n            task_name=task.func.__name__,\\\\\n        )\\\\\n        for task in app._get_tasks(exclude_type=set())\\\\\n    ]