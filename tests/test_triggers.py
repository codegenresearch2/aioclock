from datetime import datetime\n\nimport pytest\nimport zoneinfo\n\nfrom aioclock.triggers import At, Every, Forever, LoopController, Once\n\n\ndef test_at_trigger():\n    # test this sunday\n    trigger = At(at='every sunday', hour=14, minute=1, second=0, tz='Europe/Istanbul')\n\n    val = trigger._get_next_ts(\n        datetime(\n            year=2024,\n            month=3,\n            day=31,\n            hour=14,\n            minute=00,\n            second=0,\n            tzinfo=zoneinfo.ZoneInfo('Europe/Istanbul'),\n        )\n    )\n    assert val == 60\n\n    # test next week\n    trigger = At(at='every sunday', hour=14, second=59, tz='Europe/Istanbul')\n\n    val = trigger._get_next_ts(\n        datetime(\n            year=2024,\n            month=3,\n            day=31,\n            hour=14,\n            minute=0,\n            second=0,\n            tzinfo=zoneinfo.ZoneInfo('Europe/Istanbul'),\n        )\n    )\n    assert val == 59\n\n    # test every day\n    trigger = At(at='every day', hour=14, second=59, tz='Europe/Istanbul')\n    val = trigger._get_next_ts(\n        datetime(\n            year=2024,\n            month=3,\n            day=31,\n            hour=14,\n            minute=0,\n            second=0,\n            tzinfo=zoneinfo.ZoneInfo('Europe/Istanbul'),\n        )\n    )\n    assert val == 59\n\n    # test next week\n    trigger = At(at='every saturday', hour=14, second=0, tz='Europe/Istanbul')\n    val = trigger._get_next_ts(\n        datetime(\n            year=2024,\n            month=3,\n            day=31,\n            hour=14,\n            minute=0,\n            second=0,\n            tzinfo=zoneinfo.ZoneInfo('Europe/Istanbul'),\n        )\n    )\n    assert val == 518400\n\n\n@pytest.mark.asyncio\nasync def test_loop_controller():\n    # since once trigger is triggered, it should not trigger again.\n    trigger = Once()\n    assert trigger.should_trigger() is True\n    await trigger.trigger_next()\n    assert trigger.should_trigger() is False\n\n    class IterateFiveTime(LoopController):\n        type_ = 'foo'\n\n        async def trigger_next(self) -> None:\n            self._increment_loop_counter()\n            return None\n\n    trigger = IterateFiveTime(max_loop_count=5)\n    for _ in range(5):\n        assert trigger.should_trigger() is True\n        await trigger.trigger_next()\n\n    assert trigger.should_trigger() is False\n\n\n@pytest.mark.asyncio\nasync def test_forever():\n    trigger = Forever()\n    assert trigger.should_trigger() is True\n    await trigger.trigger_next()\n    assert trigger.should_trigger() is True\n    await trigger.trigger_next()\n    assert trigger.should_trigger() is True\n\n\n@pytest.mark.asyncio\nasync def test_every():\n    # wait should always wait for the period on first run\n    trigger = Every(seconds=1, first_run_strategy='wait')\n    assert await trigger.get_waiting_time_till_next_trigger() == 1\n\n    # immediate should always execute immediately, but wait for the period from second run.\n    trigger = Every(seconds=1, first_run_strategy='immediate')\n    assert await trigger.get_waiting_time_till_next_trigger() == 0\n    trigger._increment_loop_counter()\n    assert await trigger.get_waiting_time_till_next_trigger() == 1\n